{"ast":null,"code":"var bip39 = require(\"bip39\");\n\nvar hdkey = require('ethereumjs-wallet/hdkey');\n\nvar ProviderEngine = require(\"web3-provider-engine\");\n\nvar FiltersSubprovider = require('web3-provider-engine/subproviders/filters.js');\n\nvar HookedSubprovider = require('web3-provider-engine/subproviders/hooked-wallet.js');\n\nvar ProviderSubprovider = require(\"web3-provider-engine/subproviders/provider.js\");\n\nvar Web3 = require(\"web3\");\n\nvar Transaction = require('ethereumjs-tx');\n\nfunction HDWalletProvider(mnemonic, provider_url) {\n  var address_index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var num_addresses = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  this.mnemonic = mnemonic;\n  this.hdwallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(mnemonic));\n  this.wallet_hdpath = \"m/44'/60'/0'/0/\";\n  this.wallets = {};\n  this.addresses = [];\n\n  for (var i = address_index; i < address_index + num_addresses; i++) {\n    var wallet = this.hdwallet.derivePath(this.wallet_hdpath + i).getWallet();\n    var addr = '0x' + wallet.getAddress().toString('hex');\n    this.addresses.push(addr);\n    this.wallets[addr] = wallet;\n  }\n\n  var tmp_accounts = this.addresses;\n  var tmp_wallets = this.wallets;\n  this.engine = new ProviderEngine();\n  this.engine.addProvider(new HookedSubprovider({\n    getAccounts: function getAccounts(cb) {\n      cb(null, tmp_accounts);\n    },\n    getPrivateKey: function getPrivateKey(address, cb) {\n      if (!tmp_wallets[address]) {\n        return cb('Account not found');\n      } else {\n        cb(null, tmp_wallets[address].getPrivateKey().toString('hex'));\n      }\n    },\n    signTransaction: function signTransaction(txParams, cb) {\n      var pkey;\n\n      if (tmp_wallets[txParams.from]) {\n        pkey = tmp_wallets[txParams.from].getPrivateKey();\n      } else {\n        cb('Account not found');\n      }\n\n      var tx = new Transaction(txParams);\n      tx.sign(pkey);\n      var rawTx = '0x' + tx.serialize().toString('hex');\n      cb(null, rawTx);\n    }\n  }));\n  this.engine.addProvider(new FiltersSubprovider());\n  this.engine.addProvider(new ProviderSubprovider(new Web3.providers.HttpProvider(provider_url)));\n  this.engine.start(); // Required by the provider engine.\n}\n\n;\n\nHDWalletProvider.prototype.sendAsync = function () {\n  this.engine.sendAsync.apply(this.engine, arguments);\n};\n\nHDWalletProvider.prototype.send = function () {\n  return this.engine.send.apply(this.engine, arguments);\n}; // returns the address of the given address_index, first checking the cache\n\n\nHDWalletProvider.prototype.getAddress = function (idx) {\n  console.log('getting addresses', this.addresses[0], idx);\n\n  if (!idx) {\n    return this.addresses[0];\n  } else {\n    return this.addresses[idx];\n  }\n}; // returns the addresses cache\n\n\nHDWalletProvider.prototype.getAddresses = function () {\n  return this.addresses;\n};\n\nmodule.exports = HDWalletProvider;","map":null,"metadata":{},"sourceType":"script"}